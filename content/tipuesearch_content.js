var tipuesearch = {"pages": [{'title': '第九週實習', 'text': '\n \n', 'tags': '', 'url': '第九週實習.html'}, {'title': '電腦軟硬體簡介', 'text': '', 'tags': '', 'url': '電腦軟硬體簡介.html'}, {'title': '硬體：', 'text': '主機： \n 1.機殼 \n 2.電源 \n 3.顯示卡 \n 4.中央處理器(CPU) \n 5.主機板 \n 6.音效卡 \n 7.網路卡 \n 8.記憶體(RAM) \n 9.硬碟 \n 10.光碟機 \n 11.軟碟機 \n 其他： \n 1.螢幕 \n 2.鍵盤 \n 3.滑鼠 \n 4.耳機 \n 5.掃描器 \n 6.印表機 \n \n', 'tags': '', 'url': '硬體：.html'}, {'title': '軟體：', 'text': '1.系統軟體 \n 2.應用軟體 \n ======= \n \n', 'tags': '', 'url': '軟體：.html'}, {'title': 'about', 'text': '', 'tags': '', 'url': 'about.html'}, {'title': 'W2', 'text': '', 'tags': '', 'url': 'W2.html'}, {'title': '架設網站', 'text': 'step1：建立github帳號 \n step2：建立508331**的倉儲，設定為公開(**為學號) \n step3：到mde.tw中下載wcmj2020 \n step4：開啟start.bat ，將建立的網站網址 git clone ，再從 tmp 進到 wcmj2020 再進到 cmsimde 利用python 開啟近端，輸入密碼 admin 。再將網站名字改為自己的學號，輸入自己的筆記重點。最後按下 generate_pages 轉為靜態網站。 \n step5：再回到 start.bat 輸入cd .. (cd .. 為退回上個資料夾) \n step6：輸入git add . \n step7：輸入 git commit -m "**"(**為檔案名稱) \n step8：最後輸入 git push ，輸入 github 的帳號密碼即可上傳至遠端，網站即可建立完成 \n', 'tags': '', 'url': '架設網站.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': '建立blogger', 'text': 'step1： 登入google帳號，到blogger點選新增網誌 \n step2： 輸入網誌名稱 \n step3： 輸入網誌網址，網 址的格式為 ******.blogspot.com \n 最後將自己想寫的東西寫上即可 \n \n \n \n \n \n', 'tags': '', 'url': '建立blogger.html'}, {'title': 'W7', 'text': '', 'tags': '', 'url': 'W7.html'}, {'title': '1.如何使用meet', 'text': '', 'tags': '', 'url': '1.如何使用meet.html'}, {'title': '2.介紹obs及ShareX', 'text': 'obs \n 錄製工具，畫質較高 \n ShareX \n 截圖、修圖、翻譯功能 \n', 'tags': '', 'url': '2.介紹obs及ShareX.html'}, {'title': 'W8', 'text': '', 'tags': '', 'url': 'W8.html'}, {'title': 'THU', 'text': 'English class: \n word: network management, engineering graphics, mechanical design, mechanical workshop \n', 'tags': '', 'url': 'THU.html'}, {'title': 'FRI', 'text': '810 proxy setting: \n 2001:288:6004::"53,42,17,7,4(擇其一)"(140.130.17.4:3128) \n 會議：meet.google.com \n w9在線上上課 \n 組別1： 50833110 \xa0 50833112 \xa0 50833115 \xa0 50833123 \xa0 50833127 \xa0 50833128 \xa0 50833129 \xa0 50833131 \xa0 50833133 \xa0 50833138 \n', 'tags': '', 'url': 'FRI.html'}, {'title': 'W1-W9', 'text': '', 'tags': '', 'url': 'W1-W9.html'}, {'title': '英文：', 'text': '大量英文單字 \n', 'tags': '', 'url': '英文：.html'}, {'title': '程式、網站：', 'text': '程式用語 \n 介紹google的內建程式(ex: google meet, google drive, calendar) \n \n', 'tags': '', 'url': '程式、網站：.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': '特殊名詞：', 'text': 'Public key \xa0 公開密鑰加密 \n Cryptography \xa0 編碼學 \n SSH \xa0 安全編碼機制 \n', 'tags': '', 'url': '特殊名詞：.html'}, {'title': 'SSH：', 'text': '安全編碼機制 \n Putty：A free SSH for Windows \n 設置目的：省略帳號密碼，保護個資 \n', 'tags': '', 'url': 'SSH：.html'}, {'title': 'W12', 'text': "step1: 利用瀏覽器進入 mde.tw 再進入 wcmj2020 到實習項目中下載 wcmj2020_tool.7z \n step2: 解壓縮 wcmj2020_tool.7z 後 進入 start.bat 輸入指令開啟leo Y:>cd tmp Y:\\tmp>cd wcmj2020 Y:\\tmp\\wcmj2020>leo \n step3: 利用leo開啟 pelican.leo 修改 共用: AUTHOR = '50833112' SITENAME = '名稱' 遠端的SITEURL \n step4:在2018 Fall CP 課程中按 Ctrl+i 新增網誌 \n step5: 存取 local-blog 後再利用 start.bat 輸入 Y:>cd tmp Y:\\tmp>cd wcmj2020 Y:\\tmp\\wcmj2020>pelican markdown -o blog -s publishconf.py \n step6: 最後到 https://localhost:8444 確認blog 是否有推上去 \n", 'tags': '', 'url': 'W12.html'}, {'title': 'W13-14', 'text': 'Pelican Blog 內容與 Google Blogger 同步 \n', 'tags': '', 'url': 'W13-14.html'}, {'title': '利用leo更新blogger', 'text': 'step1: 利用google chrome 開啟 https://console.developers.google.com/ \xa0，建立一把desktop client的金鑰。啟動 blogger API V3 存在tmp下建立檔名"client_secrets.json" \n step2: 利用start.bat 開起 leo \n step3: 建立 add_to_blogger & edit_to_blogger，從mde.tw中的wcmj2020 w12-13分別複製程式碼。 \n step4: 將所寫日誌改為 @clean 起頭，將內文存取到文章標題下一節 \n step5: 按下按鈕add_to_blogger，上傳文章到blogger \n', 'tags': '', 'url': '利用leo更新blogger.html'}, {'title': 'add_to_blogger', 'text': '@language python\nfrom markdown import markdown\nfrom oauth2client import client\n#from googleapiclient import sample_tools\nimport os\n# 配合使用 credential token\nimport pickle\nfrom googleapiclient.discovery import build\n#from google_auth_oauthlib.flow import InstalledAppFlow\n#from google.auth.transport.requests import Request\n \nos.environ[\'TZ\'] = \'Asia/Taipei\'\nwith open(\'./../../blogger_credentials.dat\', \'rb\') as credentials_dat:\n    credentials = pickle.load(credentials_dat)\nservice = build(\'blogger\', \'v3\', credentials=credentials)\n \ndef get_cat_tag_content(data):\n    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---\n    # 用跳行符號分割\n    data_list = data.split("\\n")\n    #第 2 行為 title\n    title= data_list[1]\n    #第 4 行為 category\n    category = data_list[3]\n    #第 5 行為 tags\n    tags = data_list[4]\n    # 有多項資料的 content 型別為數列\n    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料\n    content = "\\n".join(data_list[8:])\n    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 <!--more-->\n    content = content.replace(\'<!-- PELICAN_END_SUMMARY -->\', \'<!--more-->\')\n    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式\n    #content = content.replace(\'~~~python\', \'[code lang="python"]\')\n    #content = content.replace(\'~~~\', \'[/code]\')\n    return title, category, tags, content\n \n# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容\n# p.h 為 @clean filename.md\n# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案\nmd_filename = p.h.split(" ")[1]\nwith open(md_filename, \'r\', encoding="utf-8") as content_file:\n    md_content = content_file.read()\n# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)\ntitle_str, category_str, tags_str, content = get_cat_tag_content(md_content)\ncategory = category_str.split(":")[1]\ntags = tags_str.split(":")[1].split(",")\ntags.append(category)\n# title 是一個單獨的字串\ntitle = title_str.split(":")[1]\n# 將 markdown 格式 content 轉為 html\ncontent = markdown(content)\n# 以下處理 content 的 <h2> 標題\ncontent = content.replace("<h2>", "<h2><font size=\'4\'>")\ncontent = content.replace("</h2>", "</font></h2>")\n# g.es(content)\n \ntry:\n    \'\'\'\n    users = service.users()\n    # 取得使用者 profile 資料\n    user = users.get(userId=\'self\').execute()\n    print(\'網誌名稱: %s\' % user[\'displayName\'])\n    \'\'\'\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    # post_id is now blogs["items"][0]["id"]\n    blog_id = blogs["items"][0]["id"]\n    #for blog in blogs[\'items\']:\n        #print(blog[\'name\'], blog[\'url\'])\n    posts = service.posts()\n    # 新增網誌 post 時, 需要 post_id\n    body = {\n    "kind": "blogger#post",\n    "id": blog_id,\n    "title": title,\n    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容\n    "content": content,\n    "labels": tags\n    }\n    insert = posts.insert(blogId=blog_id, body=body)\n    posts_doc = insert.execute()\n    post_id = posts_doc["id"]\n    #print(posts_doc)\n    # 改用 credential token 後不會產生 blogger.dat\n    #os.remove("blogger.dat")\n    # 利用最後的 child 節點來儲存 post_id\n    to_save_post_id = p.insertAsLastChild()   \n    # 改為內文為空的節點, id 直接標在 head 標題 \n    to_save_post_id.b = ""\n    to_save_post_id.h = post_id\n    # 因為新增節點, commander 必須 redraw\n    c.redraw()\n    g.es("post_id 為", post_id)\n    g.es("已經將資料送往 Blogger!")\nexcept(client.AccessTokenRefreshError):\n    g.es("error") \n \n \n', 'tags': '', 'url': 'add_to_blogger.html'}, {'title': 'edit_to_blogger', 'text': '@language python\nfrom markdown import markdown\nfrom oauth2client import client\n#from googleapiclient import sample_tools\nimport os\n# 配合使用 credential token\nimport pickle\nfrom googleapiclient.discovery import build\n#from google_auth_oauthlib.flow import InstalledAppFlow\n#from google.auth.transport.requests import Request\n \nos.environ[\'TZ\'] = \'Asia/Taipei\'\nwith open(\'./../../blogger_credentials.dat\', \'rb\') as credentials_dat:\n    credentials = pickle.load(credentials_dat)\nservice = build(\'blogger\', \'v3\', credentials=credentials)\n \ndef get_cat_tag_content(data):\n    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---\n    # 用跳行符號分割\n    data_list = data.split("\\n")\n    #第 2 行為 title\n    title= data_list[1]\n    #第 4 行為 category\n    category = data_list[3]\n    #第 5 行為 tags\n    tags = data_list[4]\n    # 有多項資料的 content 型別為數列\n    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料\n    content = "\\n".join(data_list[8:])\n    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 <!--more-->\n    content = content.replace(\'<!-- PELICAN_END_SUMMARY -->\', \'<!--more-->\')\n    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式\n    #content = content.replace(\'~~~python\', \'[code lang="python"]\')\n    #content = content.replace(\'~~~\', \'[/code]\')\n    return title, category, tags, content\n \n# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容\n# p.h 為 @clean filename.md\n# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案\nmd_filename = p.h.split(" ")[1]\nwith open(md_filename, \'r\', encoding="utf-8") as content_file:\n    md_content = content_file.read()\n# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)\ntitle_str, category_str, tags_str, content = get_cat_tag_content(md_content)\ncategory = category_str.split(":")[1]\ntags = tags_str.split(":")[1].split(",")\ntags.append(category)\n# title 是一個單獨的字串\ntitle = title_str.split(":")[1]\n# 將 markdown 格式 content 轉為 html\ncontent = markdown(content)\n# 以下處理 content 的 <h2> 標題\ncontent = content.replace("<h2>", "<h2><font size=\'4\'>")\ncontent = content.replace("</h2>", "</font></h2>")\n# g.es(content)\n \ntry:\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    blog_id = blogs["items"][0]["id"]\n    # 設法取得原 post 的 id\n    postid_outline = p.getLastChild()\n    # 直接從標題取得 post 的 id 號碼\n    post_id = postid_outline.h\n    posts = service.posts()\n    # 更新網誌文章時的 body\n    body = {\n    "kind": "blogger#post",\n    "title": title,\n    "content": content\n    }\n    # need to save postId to outline head\n    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)\n    update_doc = update.execute()\n    # 使用 credential token 後, 無需刪除 blogger.dat\n    #os.remove("blogger.dat")\n    g.es("post_id 為", post_id)\n    g.es("已經將更新資料送往 Blogger!")\nexcept(client.AccessTokenRefreshError):\n    g.es("error") \n', 'tags': '', 'url': 'edit_to_blogger.html'}, {'title': 'W15~16', 'text': '將W1~W18的內容整理到自己的倉儲與網誌上並加上影音檔及圖片。可自訂主題，再 將分組協同的過程與內容整理在個人與分組的倉儲資料中 \n', 'tags': '', 'url': 'W15~16.html'}, {'title': 'GIF', 'text': '\n \n', 'tags': '', 'url': 'GIF.html'}, {'title': 'cats', 'text': '\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n', 'tags': '', 'url': 'cats.html'}]};