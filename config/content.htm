<h1>about</h1>
<p>學習項目：</p>
<p>1.架設網站</p>
<p>2.建立<a href="http://www.blogger.com">blogger</a>並使用</p>
<p>3.IPV4,IPV6及proxy介紹</p>
<p>4.google各項工具介紹</p>
<p>5.obs,shareX的介紹及應用</p>
<p>6.leo的使用 </p>
<p></p>
<p></p><h2>W2</h2>
<h3>架設網站</h3>
<p>step1：建立github帳號</p>
<p><span>step2：建立508331**的倉儲，設定為公開(**為學號)</span></p>
<p><span>step3：到mde.tw中下載wcmj2020</span></p>
<p><span>step4：開啟start.bat ，將建立的網站網址 git clone ，再從 tmp 進到 wcmj2020 再進到 cmsimde 利用python 開啟近端，輸入密碼 admin 。再將網站名字改為自己的學號，輸入自己的筆記重點。最後按下 generate_pages 轉為靜態網站。</span></p>
<p><span>step5：再回到 start.bat 輸入cd .. (cd .. 為退回上個資料夾)</span></p>
<p><span>step6：輸入git add .</span></p>
<p><span>step7：輸入 git commit -m "**"(**為檔案名稱)</span></p>
<p><span>step8：最後輸入 git push ，輸入 github 的帳號密碼即可上傳至遠端，網站即可建立完成</span></p><h2>W3</h2>
<h3>建立blogger</h3>
<p><span>step1：</span>登入google帳號，到blogger點選新增網誌</p>
<p><span>step2：</span>輸入網誌名稱</p>
<p><span>step3：</span>輸入網誌網址，網<span>址的格式為</span><span lang="EN-US">******.blogspot.com</span></p>
<p>最後將自己想寫的東西寫上即可</p>
<p><img alt="" height="267" src="/images/螢幕擷取畫面 (3).png" width="402"/></p>
<p><img alt="" height="318" src="/images/螢幕擷取畫面 (4).png" width="402"/></p>
<p><span lang="EN-US"><img alt="" height="352" src="/images/螢幕擷取畫面 (6).png" width="403"/></span></p>
<p><span lang="EN-US"></span></p>
<p><span lang="EN-US"></span></p><h2>W7</h2>
<h3>如何使用meet</h3>
<p>登入google帳號，進到<a href="https://meet.google.com/">https://meet.google.com/</a>，按下發起會議即可。</p>
<p>若只想讓一些人加入會議，只需要將meet的連結發給特定的人即可。 </p>
<p><img alt="" height="250" src="/images/螢幕擷取畫面 (7).png" width="445"/> </p>
<h3>介紹obs及ShareX</h3>
<h4>obs</h4>
<p>錄製工具，畫質較高</p>
<h4>ShareX</h4>
<p>截圖、修圖、翻譯功能</p>
<h2>W8</h2>
<h3>810 proxy setting</h3>
<p>2001:288:6004::"53,42,17,7,4(擇其一)"(140.130.17.4:3128)</p>
<h6><img alt="" height="270" src="/images/螢幕擷取畫面 (8).png" width="480"/></h6><h3>公告</h3>
<p><span>會議：meet.google.com</span></p>
<p>w9在線上上課</p>
<p>組別組員：<span class="number">50833110</span><span><span> </span></span><span class="number">50833112</span><span><span> </span></span><span class="number">50833115</span><span><span> </span></span><span class="number">50833123</span><span><span> </span></span><span class="number">50833127</span><span><span> </span></span><span class="number">50833128</span><span><span> </span></span><span class="number">50833129</span><span><span> </span></span><span class="number">50833131</span><span><span> </span></span><span class="number">50833133</span><span><span> </span></span><span class="number">50833138</span></p><h2>W1-W9</h2>
<h3>程式、網站</h3>
<p>1.程式用語</p>
<p>2.介紹google的內建程式(ex: google meet, google drive, calendar)</p>
<p>3.架設網站</p>
<p><span></span></p><h2>W10</h2>
<h3>特殊名詞</h3>
<p><span>Public key<span> </span></span>公開密鑰加密</p>
<p><span>Cryptography<span> </span></span>編碼學</p>
<p><span>SSH<span> </span></span>安全編碼機制</p>
<h3>SSH</h3>
<p></p>
<h4><span lang="EN-US">SSH簡略介紹</span></h4>
<p><span lang="EN-US">SSH<span> </span></span><span>為</span><span lang="EN-US"><span> </span>Secure Shell<span> </span></span><span>的縮寫，由</span><span lang="EN-US"><span> </span>IETF<span> </span></span><span>的網路工作小組（</span><span lang="EN-US">Network Working Group<span> </span></span><span>）所制定；</span><span lang="EN-US">SSH<span> </span></span><span>為建立在應用層和傳輸層基礎上的安全協議。</span></p>
<h4><span>目的</span></h4>
<p><span>傳統的網路服務程序，在本質上都是不安全的。原因為它會將的你的資料用明文傳送到網絡上，很容易被他人擷取資料。這種服務程序的安全驗證方式也有其弱點，就是很容易受到"中間人"（man-in-the-middle）這種方式的攻擊。</span></p>
<p><span>所以我們可以通過使用SSH，將傳輸的資料進行加密，而就無法達成中間人這種攻擊方式，並且也能夠防止DNS和IP欺騙。另一項好處是傳輸資料的速度會加快，原因為資料是經過壓縮後才傳輸的。</span></p>
<h4><span style="background-color: #ffffff;"><span lang="EN-US">SSH</span>協議框架中最主要三個協議</span></h4>
<p><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82">傳輸層協議（The Transport Layer Protocol）</a></p>
<p><span style="background-color: #ffffff;"><span lang="EN-US"><a href="https://en.wikipedia.org/wiki/Authentication_protocol">用戶認證協議（The User Authentication Protocol）</a></span></span></p>
<p><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">連接協議（The Connection Protocol）</a></p>
<p><span style="background-color: #ffffff;"></span></p>
<p><span></span></p><h2>W12</h2>
<h3>leo</h3>
<h4></h4>
<h4>指令</h4>
<pre><span class="n">Shift</span><span class="o">-</span><span class="n">Down</span><span class="o">-</span><span class="n">arrow</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">down</span><span class="p">)</span>
<span class="n">Shift</span><span class="o">-</span><span class="n">Left</span><span class="o">-</span><span class="n">arrow</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">left</span><span class="p">)</span>
<span class="n">Shift</span><span class="o">-</span><span class="n">Right</span><span class="o">-</span><span class="n">arrow</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">right</span><span class="p">)</span>
<span class="n">Shift</span><span class="o">-</span><span class="n">Up</span><span class="o">-</span><span class="n">arrow</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">up</span><span class="p">)<br/></span></pre>
<pre><span class="n">Ctrl</span><span class="o">-</span><span class="n">D</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">down</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">L</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">left</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">R</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">right</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">U</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="n">outline</span><span class="o">-</span><span class="n">up</span><span class="p">)</span></pre>
<pre><span class="n">Ctrl</span><span class="o">-</span><span class="n">C</span> <span class="p">(</span><span class="n">copy</span><span class="o">-</span><span class="n">text</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">K</span> <span class="p">(</span><span class="n">kill</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">V</span> <span class="p">(</span><span class="n">paste</span><span class="o">-</span><span class="n">text</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">X</span> <span class="p">(</span><span class="n">cut</span><span class="o">-</span><span class="n">text</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Y</span> <span class="p">(</span><span class="n">yank</span><span class="p">)</span>
<span class="n">Alt</span><span class="o">-</span><span class="n">Y</span>  <span class="p">(</span><span class="n">yank</span><span class="o">-</span><span class="n">pop</span><span class="p">)</span></pre>
<pre><span class="n">Ctrl</span><span class="o">-</span><span class="n">N</span> <span class="p">(</span><span class="n">new</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">O</span> <span class="p">(</span><span class="nb">open</span><span class="o">-</span><span class="n">outline</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">S</span> <span class="p">(</span><span class="n">save</span><span class="o">-</span><span class="n">file</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Q</span> <span class="p">(</span><span class="n">exit</span><span class="o">-</span><span class="n">leo</span><span class="p">)<br/></span></pre>
<pre><span class="n">Alt</span><span class="o">-</span><span class="n">T</span> <span class="p">(</span><span class="n">focus</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">tree</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">T</span> <span class="p">(</span><span class="n">toggle</span><span class="o">-</span><span class="n">active</span><span class="o">-</span><span class="n">pane</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Tab</span> <span class="p">(</span><span class="n">tab</span><span class="o">-</span><span class="n">cycle</span><span class="o">-</span><span class="nb">next</span><span class="p">)</span></pre>
<pre><span class="n">Ctrl</span><span class="o">-</span><span class="n">I</span> <span class="ow">or</span> <span class="n">Insert</span> <span class="p">(</span><span class="n">insert</span><span class="o">-</span><span class="n">node</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">H</span> <span class="p">(</span><span class="n">edit</span><span class="o">-</span><span class="n">headline</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">Return</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">when</span> <span class="n">editing</span> <span class="n">a</span> <span class="n">headline</span><span class="p">)</span> <span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">edit</span><span class="o">-</span><span class="n">headline</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Shift</span><span class="o">-</span><span class="n">C</span> <span class="p">(</span><span class="n">copy</span><span class="o">-</span><span class="n">node</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Shift</span><span class="o">-</span><span class="n">X</span> <span class="p">(</span><span class="n">cut</span><span class="o">-</span><span class="n">node</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">Shift</span><span class="o">-</span><span class="n">V</span> <span class="p">(</span><span class="n">paste</span><span class="o">-</span><span class="n">node</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="p">{</span> <span class="p">(</span><span class="n">promote</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="p">}</span> <span class="p">(</span><span class="n">demote</span><span class="p">)</span>
<span class="n">Ctrl</span><span class="o">-</span><span class="n">M</span> <span class="p">(</span><span class="n">mark</span><span class="p">)</span></pre>
<pre><span class="p"></span></pre>
<pre><span class="p"> </span></pre>
<pre><span class="p"></span></pre><h3>建立網誌</h3>
<p>step1: 利用瀏覽器進入 <a href="http://mde.tw/wcmj2020/content/index.html">mde.tw</a> 到實習項目中下載 wcmj2020_tool.7z</p>
<p>step2: 解壓縮 wcmj2020_tool.7z 後 進入 start.bat 輸入指令開啟leo(指令輸入leo即可)</p>
<p>step3: 利用leo開啟 pelican.leo 修改 共用: AUTHOR = '50833112' SITENAME = '名稱' 遠端的SITEURL</p>
<p>step4:在2018 Fall CP 課程中按 Ctrl+i 新增網誌</p>
<p>step5: 存取 local-blog 後再利用 start.bat 輸入</p>
<p>Y:&gt;cd tmp</p>
<p>Y:\tmp&gt;cd wcmj2020</p>
<p>Y:\tmp\wcmj2020&gt;pelican markdown -o blog -s publishconf.py</p>
<p>step6: 最後到 https://localhost:8444 確認blog 是否有推上去</p><h2>W13-14</h2>
<p><span>Pelican Blog 內容與 Google Blogger 同步</span></p>
<h3>利用leo更新blogger</h3>
<p>step1: 利用google chrome 開啟<a href="https://console.developers.google.com/">https://console.developers.google.com/</a> ，建立一把desktop client的金鑰。啟動 blogger API V3 存在tmp下建立檔名"client_secrets.json"</p>
<p>step2: 利用start.bat 開起 leo</p>
<p>step3: 建立 add_to_blogger &amp; edit_to_blogger，從mde.tw中的wcmj2020 w12-13分別複製程式碼。</p>
<p>step4: 將所寫日誌改為 @clean 起頭，將內文存取到文章標題下一節</p>
<p>step5: 按下按鈕add_to_blogger，上傳文章到blogger</p>
<h3>add_to_blogger</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request
 
os.environ['TZ'] = 'Asia/Taipei'
with open('./../../blogger_credentials.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
 
def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content
 
# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)
 
try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    blog_id = blogs["items"][0]["id"]
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")</pre>
<p><br/><br/></p>
<p><span></span></p>
<h3>edit_to_blogger</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request
 
os.environ['TZ'] = 'Asia/Taipei'
with open('./../../blogger_credentials.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
 
def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content
 
# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)
 
try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    blog_id = blogs["items"][0]["id"]
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")</pre>
<h2>W15~16</h2>
<p>將W1~W18的內容整理到自己的倉儲與網誌上並加上影音檔及圖片。可自訂主題，再<span>將分組協同的過程與內容整理在個人與分組的倉儲資料中</span></p>
<p><span>=====</span></p>
<h1>第九週實習(期中報告)</h1>
<p><span></span>考試項目：電腦軟硬體簡介&amp;<span>網路架構與設定簡介</span></p>
<p></p>
<p><span></span></p>
<h2>電腦軟硬體簡介</h2>
<p>電腦大致分為軟硬體。簡單說，軟體為摸不到的，硬體為摸的到的。軟體需要硬體才能使用，硬體沒有軟體也沒有用處。所以可以說，軟硬體缺一不可。</p>
<h3>硬體</h3>
<p>硬體是電腦的物理裝置。系統轉體儲存在硬體內，包含認體（如BIOS）以及作業系統，系統軟體使應用軟體可以提供使用者所需的功能。作業系統通常藉由匯流排與裝置溝通，這就需要驅動程式。</p>
<p>電腦硬體包括電腦的物理，有形部件或組件，例如機櫃，中央處理單元，監視器，鍵盤，電腦資料記憶體，圖形卡，音效卡，揚聲器和主機板。相比之下，軟體是可以由硬體儲存和執行的指令。硬體被認為是因為它在變化或修改方面「硬」或嚴格;而軟體是「軟」的，因為它很容易更新或更改。軟體和硬體之間的中間是「韌體」，它是與電腦系統的特定硬體強耦合的軟體，因此最難以改變，但在介面的一致性方面也是最穩定的。電腦系統中從「硬度」到「柔軟度」的級別的進展與計算中的抽象層的進展相似。</p>
<p>主機板介紹</p>
<p><span>主機板是硬體的主要部分。它是一塊大的方形板，上面有複雜的電路連接到電腦的其他部分，包含CPU</span><span>，RAM</span><span>，硬碟</span><span>，光碟機（CD</span><span>，DVD</span><span>，或是其他的光碟），以及其他藉由插孔或是埠而連接的裝置。</span></p>
<p><span>主機板組成</span></p>
<p><b></b></p>
<p>1.<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8">中央處理器(CPU 全名 Central Processing Unit)</a>處理電腦內大部分的計算，其被認為是電腦的大腦。它藉散熱器和風扇來降溫。新型的中央處理器包含圖形處理器。</p>
<p>2.<a href="https://zh.wikipedia.org/wiki/%E8%8A%AF%E7%89%87%E7%BB%84">晶片組（Chipset）</a>，作為中央處理器跟系統內其他元件兩者間的聯絡工具。</p>
<p>3.<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8">隨機存取記憶體（<span lang="en">RAM</span> 全名 <span lang="en">Random Access Memory</span>）</a>儲存正在執行的作業系統以及所有正在執行的程式。</p>
<p>4.<a href="https://zh.wikipedia.org/wiki/BIOS">BIOS</a><a href="https://zh.wikipedia.org/wiki/%E9%9F%8C%E9%AB%94">韌體</a><a href="https://zh.wikipedia.org/wiki/BIOS"></a>。它的英文全名是Basic Input/Output System。中文名為：基本輸入輸出系統。比較新的主機板使用<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/UEFI" title="UEFI">UEFI</a>來取代BIOS。</p>
<p>5.內部<a href="https://zh.wikipedia.org/wiki/%E6%80%BB%E7%BA%BF">匯流排</a>用來連接中央處理器和電腦內部其他元件或是顯示卡，音效卡。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E4%BB%B6">來源</a></p>
<h4><span></span></h4><h3>軟體</h3>
<h4><span>系統軟體</span></h4>
<p style="text-align: left;">1、操作系統</p>
<p style="text-align: left;">操作系統是底層的系統軟體，它是對硬體系統功能的首次擴充，</p>
<p style="text-align: left;">也是其他系統軟體和應用軟體能夠在電腦上運行的基礎。操作系統實際上是組程式，它們用於統一管理電腦中的各種軟、硬體資源，合理地組織電腦的工作流程，協調電腦系統各部分之間、系統與用戶之間、用戶與用戶之間的關係。操作系統在電腦系統中佔有非常重要的地位。</p>
<p style="text-align: left;">操作系統提供人與機器的介面界面，具有5個方面的管理功能：存儲管理、處理器管理、設備管理、文件管理和進程管理。</p>
<p style="text-align: left;">2、語言處理程式</p>
<p style="text-align: left;">人們要利用電腦解決實際問題，首先要編製程式。程式設計語言就是用來編寫程式的語言，它是人與電腦之間交換信息的渠道。</p>
<p style="text-align: left;">程式設計語言是軟體系統的重要組成部分，而相應的各種語言處理程式屬於系統軟體。程式設計語言一般分為機器語言、彙邊語言和高級語言3類。</p>
<p style="text-align: left;">一.機器語言是底層的電腦語言。用機器語言編寫的程式，電腦硬體可以直接識別。</p>
<p style="text-align: left;">二.彙編語言是為了便於理解與記憶，將機器語言用助記符代替而形成的一種語言。</p>
<p style="text-align: left;">三.高級語言與具體的電腦硬體無關，其表達方式接近於人描述問題的方式，易為人們所接受和掌握。用高級語言編寫程式要比低級語言容易得多，並大大簡化了程式的編製和調試，使編程效率得到大幅度的提高。高級語言的顯著特點是獨立於具體的電腦硬體，並且通用性和可移植性好。</p>
<p style="text-align: left;">語言處理程式就是把彙編或高級語言程式翻譯成電腦硬體可以直接處理的機器語言，存放於電腦記憶體中。供電腦系統執行。因此語言處理程式與程式設計語言、具體硬體類型是密切相關的，程式設計語言和硬體不同時，必須配以相應的語言處理程式。</p>
<p style="text-align: left;">3、資料庫管理系統</p>
<p style="text-align: left;">隨著電腦在信息處理、情報檢所及各種管理系統中應用的發展，要求大量處理某些數據，建立和檢索大量的表格。如果將這些數據和表格按一定的規律組織起來。可以使得這些數據和表格處理起來更方便，檢索更迅速，用戶使用更方便，於是出現了資造庫。資料庫就是相關數據的集合。資料庫和管理資料庫的軟體構成了資料庫管理系統。</p>
<p style="text-align: left;">資料庫管理系統目前有許多種類型。例如，常用的關係資造庫有Access、Sybase、Oracle、SQI。Server和DB2等。</p>
<p style="text-align: left;">4、服務程式</p>
<p style="text-align: left;">服務程式有編輯程式、電腦硬體初始化程式和測試排錯程式等，主要用於電腦設備自身的應用服務。例如，記憶體檢查，優化管理，磁碟格式化、查錯，光碟寫入，網絡連接等都屬於服務程式。</p>
<p style="text-align: left;"><a href="https://wiki.mbalib.com/zh-tw/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6">來源</a></p>
<h4>應用軟體</h4>
<p>應用程式（英語：<span lang="en">application program</span>）或應用軟體（<span lang="en">application software</span>），簡稱應用（<span lang="en">app</span>），是電腦軟體的主要分類之一，是指為針對使用者的某種特殊應用目的所撰寫的電腦程式，例如文字處理器，表格，會計應用，瀏覽器，媒體播放器，航空飛行模擬器，命令行遊戲，圖像編輯器等。與之相對應的是主要功能為驅動電腦執行的系統軟體。或者說，應用軟體可以直接完成終端用戶的工作。從某種意義上來講，系統軟體是為應用軟體服務的，應用軟體才是真正直接 提高用戶工作的。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">來源</a></p>
<p>=======</p><h1>GIF</h1>
<p><img alt="earth walks - GIF by Mila Magermans" src="https://cdn130.picsart.com/305196285203201.gif"/></p>
<h6><img alt="Egg (With images) | Cute gif, Animated gif, Gif" src="https://i.pinimg.com/originals/fd/3c/cd/fd3ccd7b49e366b4206f5ac7f8fa8dac.gif"/></h6>
<h1>cats</h1>
<p><img alt="yet yet cut cats (23) | Goneys | Flickr" src="https://live.staticflickr.com/8434/7793155944_188396324f_b.jpg"/></p>
<p><img alt="yet yet cut cats (7) | Goneys | Flickr" src="https://live.staticflickr.com/8298/7793166252_334475a33b_b.jpg"/>                       </p>
<p></p>